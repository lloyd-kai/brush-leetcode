#pragma once
#include <iostream>
#include <cstring>
using namespace std;

//静态数组的相关操作
void Test_StaticArray(void)
{
	//静态数组简单的操作
	//定义一个大小为10的静态数组
	//int arr[10];

	//用memset函数把数组的值初始化为0
	//memset(arr, 0, sizeof(arr));

	//使用索引赋值
	//arr[0] = 1;
	//arr[1] = 2;

	//使用索引取值
	//int a = arr[0];


	//----------------------------
	//数组末尾添加元素
	//大小为10的数组已经添加了四个元素
	//int arr[10];
	//for (int i = 0; i < 4; i++)
	//{
	//	arr[i] = i;
	//}
	//在数组末尾追加一个元素4
	//arr[4] = 4;
	//再次追加
	//arr[5] = 5;


	//----------------------------
	//数组插入元素
	//数组初始化
	//int arr[10];
	//for (int i = 0; i < 4; i++)
	//{
	//	arr[i] = i;
	//}

	//在索引2位置插入元素666
	//首先需要将索引2以及之后的元素都往后移动一位
	//要从后往前开始遍历防止已有元素覆盖
	//for (int i = 4; i > 2; i--)
	//{
	//	arr[i] = arr[i - 1];
	//}
	//
	////插入新元素
	//arr[2] = 666;
	//
	////打印数组元素
	//for (int i = 0; i < 5; i++)
	//{
	//	cout << arr[i] << " \n"[i == 4];
	//}


	//----------------------------
	/*
	//数组已满
	//这种情况下不能直接在后面的空间中添加元素，而是向内存再申请一大块连续的存储，然后在添加
	int arr[10];
	for (int i = 0; i < 10; i++)
	{
		arr[i] = i;
	}

	//在数组的末尾添加元素10
	//先申请空间
	int NewArr[20];
	//把原来的10个元素复制到这里
	for (int i = 0; i < 10; i++)
	{
		NewArr[i] = arr[i];
	}
	//释放旧数组的空间
	//在C中一般用free

	//添加新元素
	NewArr[10] = 10;
	*/


	//----------------------------
	//删除末尾元素
	//int arr[10];
	//for (int i = 0; i < 10; i++)
	//{
	//	arr[i] = i;
	//}
	//删除末尾元素，用-1代表元素删除
	//在很多教材上都没有删除末尾元素，因为可以用赋值语句直接同时实现删除与添加的操作，比如arr[10] = 9;将末尾元素10删除并添加9
	//arr[10] = -1;


	//----------------------------
	//删除中间元素
	//和中间添加元素的原理一样，不同的是从前往后覆盖
	int arr[10];
	for (int i = 0; i < 5; i++)
	{
		arr[i] = i;
	}

	//删除arr[1]
	//把arr[1]之后的元素都往前移动一位
	for (int i = 1; i < 4; i++)
	{
		arr[i] = arr[i + 1];
	}


	//最后一个元素置为-1表示此元素已被删除
	//在数据结构中这一步也是没有的，原因和之前将删除末尾元素的一样
	arr[4] = -1;


}


